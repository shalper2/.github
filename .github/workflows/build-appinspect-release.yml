name: Package Splunk Add-On, Run AppInspect, Release

on:
  workflow_call

# Allow only 1 concurrent execution
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Grants permission to create releases
permissions:
  contents: write

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.9 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: pre-commit/action@v3.0.1

  build:
    name: Bundle the App
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        python-version: [ 3.9 ]
    outputs:
      artifact_name: ${{ steps.artifact.outputs.name }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade crudini splunk-packaging-toolkit splunk-add-on-ucc-framework

      - name: Get App Info
        id: app
        run: |
          MANIFEST="app.manifest"
          APP_CONF="default/app.conf"
          if [ -f "$MANIFEST" ]; then
            app_id=$(cat "$MANIFEST" | jq -r '.info.id.name')
            app_version=$(cat "$MANIFEST" | jq -r '.info.id.version')
            echo "name=${app_id}" >> $GITHUB_OUTPUT
            echo "version=${app_version}" >> $GITHUB_OUTPUT
          elif [ -f "$APP_CONF" ]; then
            app_pck_id=$(crudini --get "$APP_CONF" package id 2>/dev/null || echo "")
            app_id=$(crudini --get "$APP_CONF" id name 2>/dev/null || echo "")
            if [ -z "$app_pck_id" ] && [ -z "$app_id" ]; then
              echo "App Info Missing ❌ Please add 'package/app.manifest' or stanza [package] with id in 'package/default/app.conf' as per https://docs.splunk.com/Documentation/Splunk/latest/Admin/Appconf#.5Bpackage.5D"
              exit 1
            fi
            if [ -z "$app_id" ]; then
              app_id=$app_pck_id
            fi
            app_version=$(crudini --get "$APP_CONF" launcher version 2>/dev/null || echo "")
            echo "name=${app_id}" >> $GITHUB_OUTPUT
            echo "version=${app_version}" >> $GITHUB_OUTPUT
          else
            echo "Files Not Found ❌ Please add 'package/app.manifest' or 'package/default/app.conf'"
            exit 1
          fi
        working-directory: ./package

      - name: Check whether built by the UCC framework
        id: ta_builder
        run: |
          if [ -f "./globalConfig.json" ]; then
            echo "result=ucc" >> $GITHUB_OUTPUT
          else
            echo "result=none" >> $GITHUB_OUTPUT
          fi

      - name: Bundle App Source
        if: ${{ steps.ta_builder.outputs.result == 'none' }}
        run: |
          sed -i '/^!/d' README.md
          cp README.md package/README.md
          if [ ! -f "./package/default/addon_builder.conf" ]; then
            rm -rf package/README.txt
          fi
          mkdir -p output/${{ steps.app.outputs.name }}
          cp -r package/* output/${{ steps.app.outputs.name }}
          tar -C output -zcvf ${{ steps.app.outputs.name }}-${{ steps.app.outputs.version }}.tar.gz ${{ steps.app.outputs.name }}/

      - name: Build and bundle TA
        if: ${{ steps.ta_builder.outputs.result == 'ucc' }}
        run: |
          ucc-gen build --ta-version ${{ steps.app.outputs.version }}
          chmod -R +r output
          chmod -R go-w output
          ucc-gen package --path output/${{ steps.app.outputs.name }}
        shell: bash

      - id: artifact
        run: |
          echo "name=${{ steps.app.outputs.name }}-${{ steps.app.outputs.version }}-py${{ matrix.python-version }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ steps.app.outputs.name }}*.tar.gz

  appinspect-cli:
    name: appinspect-cli ${{ matrix.tags }}
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: build
    strategy:
      matrix:
        tags:
          - "cloud"
          - "private_app"
          - "private_classic"
          - "private_victoria"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: dist
      - uses: splunk/appinspect-cli-action@v2.10
        with:
          app_path: dist
          included_tags: ${{ matrix.tags }}
      - uses: actions/upload-artifact@v4
        with:
          name: appinspect_result_${{ matrix.tags }}
          path: appinspect_result.json

  release:
    name: Upload Release
    runs-on: ubuntu-latest
    needs:
      - build
      - appinspect-cli
    if: |
      startsWith(github.ref, 'refs/tags/') &&
      github.event.base_ref == 'refs/heads/main' &&
      github.event.created == true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: dist
      - name: Fetch latest release info
        id: release-info
        uses: release-flow/keep-a-changelog-action@v3
        with:
          command: query
          version: latest
      - name: Validate tag and changelog synchronization
        env:
          TAG: ${{ github.ref_name }}
          CHANGELOG_VERSION: ${{ steps.release-info.outputs.version }}
        run: |
          if [ "$TAG" != "$CHANGELOG_VERSION" ]; then
            echo "❌ '$TAG' does not match '$CHANGELOG_VERSION' provided by the CHANGELOG file. Did you forget to update the file?"
            exit 1
          fi
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: dist/*.tar.gz
          body: ${{ steps.release-info.outputs.release-notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}