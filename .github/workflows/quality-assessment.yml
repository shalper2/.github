name: Quality Assessment

on:
  workflow_call

# Allow only 1 concurrent execution
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Bundle the App
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [ 3.7, 3.9 ]
    outputs:
      artifact_name: ${{ steps.artifact.outputs.name }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade crudini splunk-packaging-toolkit splunk-add-on-ucc-framework

      - name: Get App Info
        id: app
        run: |
          MANIFEST="app.manifest"
          APP_CONF="default/app.conf"
          if [ -f "$MANIFEST" ]; then
            app_id=$(cat "$MANIFEST" | jq -r '.info.id.name')
            app_version=$(cat "$MANIFEST" | jq -r '.info.id.version')
            echo "name=${app_id}" >> $GITHUB_OUTPUT
            echo "version=${app_version}" >> $GITHUB_OUTPUT
          elif [ -f "$APP_CONF" ]; then
            app_pck_id=$(crudini --get "$APP_CONF" package id 2>/dev/null || echo "")
            app_id=$(crudini --get "$APP_CONF" id name 2>/dev/null || echo "")
            if [ -z "$app_pck_id" ] && [ -z "$app_id" ]; then
              echo "App Info Missing ❌ Please add 'package/app.manifest' or stanza [package] with id in 'package/default/app.conf' as per https://docs.splunk.com/Documentation/Splunk/latest/Admin/Appconf#.5Bpackage.5D"
              exit 1
            fi
            if [ -z "$app_id" ]; then
              app_id=$app_pck_id
            fi
            app_version=$(crudini --get "$APP_CONF" launcher version 2>/dev/null || echo "")
            echo "name=${app_id}" >> $GITHUB_OUTPUT
            echo "version=${app_version}" >> $GITHUB_OUTPUT
          else
            echo "Files Not Found ❌ Please add 'package/app.manifest' or 'package/default/app.conf'"
            exit 1
          fi
        working-directory: ./package

      - name: Check whether built by the UCC framework
        id: ta_builder
        run: |
          if [ -f "./globalConfig.json" ]; then
            echo "result=ucc" >> $GITHUB_OUTPUT
          else
            echo "result=none" >> $GITHUB_OUTPUT
          fi

      - name: Bundle App Source
        if: ${{ steps.ta_builder.outputs.result == 'none' }}
        run: |
          sed -i '/^!/d' README.md
          cp README.md package/README.md
          if [ ! -f "./package/default/addon_builder.conf" ]; then
            rm -rf package/README.txt
          fi
          mkdir -p output/${{ steps.app.outputs.name }}
          cp -r package/* output/${{ steps.app.outputs.name }}
          tar -C output -zcvf ${{ steps.app.outputs.name }}-${{ steps.app.outputs.version }}.tar.gz ${{ steps.app.outputs.name }}/

      - name: Build and bundle TA
        if: ${{ steps.ta_builder.outputs.result == 'ucc' }}
        run: |
          ucc-gen build --ta-version ${{ steps.app.outputs.version }}
          chmod -R +r output
          chmod -R go-w output
          ucc-gen package --path output/${{ steps.app.outputs.name }}
        shell: bash

      - id: artifact
        run: |
          echo "name=${{ steps.app.outputs.name }}-${{ steps.app.outputs.version }}-py${{ matrix.python-version }}" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: ${{ steps.app.outputs.name }}*.tar.gz

  appinspect-cli:
    name: appinspect-cli
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: build
    outputs:
      failures: ${{ steps.result.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.9
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: dist
      - uses: splunk/appinspect-cli-action@v2.10
        with:
          app_path: dist
          included_tags: cloud
      - name: Read AppInspect Result
        id: result
        run: |
          result=$(cat appinspect_result.json | jq '.summary.failure')
          if [[ "$result" -ne 0 ]]; then
            summary=$(cat appinspect_result.json | jq '.summary')
            echo "AppInspect CLI failed. Summary: $summary"
          fi
          echo "value=$result,0" >> $GITHUB_OUTPUT

  docs-linting:
    uses: splunk-platform-apps/.github/workflows/docs-linting.yml@main

  gold-standard:
    runs-on: ubuntu-latest
    needs:
      - appinspect-cli
      - docs-linting
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docs-linting-report
      - name: Get Docs-Linting report path
        id: docslinting
        run: |
          filepath=$(find $GITHUB_WORKSPACE/ -name "vale-report.json")
          echo "reportpath=$filepath" >> $GITHUB_OUTPUT
      - name: Assess Gold Standard compatibility
        id: qa_goldstandard
        uses: splunk-platform-apps/.github/actions/goldstandard@main
        with:
          appinspect-failures: ${{ needs.appinspect-cli.outputs.failures }}
          report-path: ${{ steps.docslinting.outputs.reportpath }}
      - name: Results
        env:
          SCORE: ${{ steps.qa_goldstandard.outputs.score }}
          THRESHOLD: ${{ steps.qa_goldstandard.outputs.min_score }}
        run: |
          echo "TA scored $SCORE points. Comparing it against $THRESHOLD..."

          if [ "$SCORE" -ge "$THRESHOLD" ]; then
            echo "Score meets or exceeds the threshold: the TA is Gold Standard compatible!"
          else
            echo "Score does not meet the minimum passing score of $THRESHOLD points"
            echo "Please verify your TA is built using the latest UCC version, performs configuration validation, provides std logging format and uses latest dependencies"
          fi
