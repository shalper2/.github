name: Create Repo from Issue

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

jobs:
  handle-issue:
    # Only run if comment is from authorized users and contains the trigger command
    if: |
      contains(fromJSON('["joseacunacarrera", "user2", "user3"]'), github.event.comment.user.login) &&
      contains(github.event.comment.body, '/generate_repo')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          issue-body: ${{ github.event.issue.body }}
          template-path: .github/ISSUE_TEMPLATE/component_request.yaml

      - run: echo '${{ steps.issue-parser.outputs.jsonString }}' > issue-form.json

      - run: cat issue-form.json

      # Setup Python + Cookiecutter
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install cookiecutter
        run: pip install cookiecutter

      # Run Cookiecutter with extra context from JSON
      - name: Generate project from template
        run: |
          mkdir -p generated
          
          # Extract values from JSON for cookiecutter
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          CODE_OWNERS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.code_owners')
          FRAMEWORK_TOOLS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.framework_tools')
          INTEGRATION=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.integration')
          ABOUT=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.about')
          
          # Run cookiecutter with individual key=value pairs
          cookiecutter \
            ./actions/template-addon-cookie-cutter \
            --no-input \
            --output-dir generated \
            component_name="$COMPONENT_NAME" \
            code_owners="$CODE_OWNERS" \
            framework_tools="$FRAMEWORK_TOOLS" \
            integration="$INTEGRATION" \
            about="$ABOUT"

      # See generated folder content
      - name: See generated folder content
        run: |
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          cd generated/"$COMPONENT_NAME"
          ls -la
          echo "Generated project: $COMPONENT_NAME"

      # Extract component name for repository creation
      - name: Set component name
        id: component-name
        run: |
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          echo "component_name=$COMPONENT_NAME" >> $GITHUB_OUTPUT
          echo "Will create repository: splunk-platform-apps/$COMPONENT_NAME"

      # Check if repository already exists
      - name: Check if repository exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME="${{ steps.component-name.outputs.component_name }}"
          echo "Checking if repository splunk-platform-apps/$REPO_NAME exists..."
          
          if gh repo view splunk-platform-apps/$REPO_NAME &>/dev/null; then
            echo "Repository splunk-platform-apps/$REPO_NAME already exists!"
            echo "Please choose a different component name or delete the existing repository."
            exit 1
          else
            echo "Repository name is available: splunk-platform-apps/$REPO_NAME"
          fi

      # Create new GitHub repository
      - name: Create GitHub repository
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME="${{ steps.component-name.outputs.component_name }}"
          echo "Creating repository: splunk-platform-apps/$REPO_NAME"
          
          gh repo create "splunk-platform-apps/$REPO_NAME" \
            --public \
            --description "Splunk Add-On: $REPO_NAME - Generated from cookiecutter template" \
            --clone
          
          echo "Repository created successfully!"

      # Initialize and push generated content
      - name: Push generated content to new repository
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_NAME="${{ steps.component-name.outputs.component_name }}"
          
          echo "Preparing to push generated content to splunk-platform-apps/$REPO_NAME"
          
          # Navigate to generated project
          cd generated/"$REPO_NAME"
          
          # Initialize git repository
          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add remote origin
          git remote add origin https://github.com/splunk-platform-apps/$REPO_NAME.git
          
          # Create commit message
          CODE_OWNERS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.code_owners')
          FRAMEWORK=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.framework_tools')
          INTEGRATION=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.integration')
          ABOUT=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.about')
          
          # Add all files and commit
          git add .
          git commit -m "Initial commit: Generated from cookiecutter template"