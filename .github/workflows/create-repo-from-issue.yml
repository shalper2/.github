name: Create Repo from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: read
  issues: write

jobs:
  handle-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          issue-body: ${{ github.event.issue.body }}
          template-path: .github/ISSUE_TEMPLATE/component_request.yaml

      - run: echo '${{ steps.issue-parser.outputs.jsonString }}' > issue-form.json

      - run: cat issue-form.json

      # Setup Python + Cookiecutter
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install cookiecutter
        run: pip install cookiecutter

      # Run Cookiecutter with extra context from JSON
      - name: Generate project from template
        run: |
          mkdir -p generated
          
          # Extract values from JSON for cookiecutter
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          CODE_OWNERS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.code_owners')
          FRAMEWORK_TOOLS=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.framework_tools')
          INTEGRATION=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.integration')
          ABOUT=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.about')
          
          # Run cookiecutter with individual key=value pairs
          cookiecutter \
            ./actions/template-addon-cookie-cutter \
            --no-input \
            --output-dir generated \
            component_name="$COMPONENT_NAME" \
            code_owners="$CODE_OWNERS" \
            framework_tools="$FRAMEWORK_TOOLS" \
            integration="$INTEGRATION" \
            about="$ABOUT"

      # See generated folder content
      - name: See generated folder content
        run: |
          COMPONENT_NAME=$(echo '${{ steps.issue-parser.outputs.jsonString }}' | jq -r '.component_name')
          cd generated/"$COMPONENT_NAME"
          ls -la
          cat README.md
